Index: gamefolio_app/DBTests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gamefolio_app/DBTests.py b/gamefolio_app/DBTests.py
deleted file mode 100644
--- a/gamefolio_app/DBTests.py	(revision 5510ebe65e441589bb2b41fb13c67816cc642cbd)
+++ /dev/null	(revision 5510ebe65e441589bb2b41fb13c67816cc642cbd)
@@ -1,62 +0,0 @@
-import os
-import warnings
-from unittest import TestCase
-from django.conf import settings
-
-
-FAILURE_HEADER = f"{os.linesep}{os.linesep}{os.linesep}================{os.linesep}TwD TEST FAILURE =({os.linesep}================{os.linesep}"
-FAILURE_FOOTER = f"{os.linesep}"
-
-
-class Chapter5DatabaseConfigurationTests(TestCase):
-    """
-    Is your database configured as the book states?
-    These tests should pass if you haven't tinkered with the database configuration.
-    N.B. Some of the configuration values we could check are overridden by the testing framework -- so we leave them.
-    """
-
-    def setUp(self):
-        pass
-
-    def does_gitignore_include_database(self, path):
-        """
-        Takes the path to a .gitignore file, and checks to see whether the db.sqlite3 database is present in that file.
-        """
-        f = open(path, 'r')
-
-        for line in f:
-            line = line.strip()
-
-            if line.startswith('db.sqlite3'):
-                return True
-
-        f.close()
-        return False
-
-    def test_databases_variable_exists(self):
-        """
-        Does the DATABASES settings variable exist, and does it have a default configuration?
-        """
-        self.assertTrue(settings.DATABASES,
-                        f"{FAILURE_HEADER}Your project's settings module does not have a DATABASES variable, which is required. Check the start of Chapter 5.{FAILURE_FOOTER}")
-        self.assertTrue('default' in settings.DATABASES,
-                        f"{FAILURE_HEADER}You do not have a 'default' database configuration in your project's DATABASES configuration variable. Check the start of Chapter 5.{FAILURE_FOOTER}")
-
-    def test_gitignore_for_database(self):
-        """
-        If you are using a Git repository and have set up a .gitignore, checks to see whether the database is present in that file.
-        """
-        git_base_dir = os.popen('git rev-parse --show-toplevel').read().strip()
-
-        if git_base_dir.startswith('fatal'):
-            warnings.warn(
-                "You don't appear to be using a Git repository for your codebase. Although not strictly required, it's *highly recommended*. Skipping this test.")
-        else:
-            gitignore_path = os.path.join(git_base_dir, '.gitignore')
-
-            if os.path.exists(gitignore_path):
-                self.assertTrue(self.does_gitignore_include_database(gitignore_path),
-                                f"{FAILURE_HEADER}Your .gitignore file does not include 'db.sqlite3' -- you should exclude the database binary file from all commits to your Git repository.{FAILURE_FOOTER}")
-            else:
-                warnings.warn(
-                    "You don't appear to have a .gitignore file in place in your repository. We ask that you consider this! Read the Don't git push your Database paragraph in Chapter 5.")
Index: gamefolio_app/PopulationScriptTests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gamefolio_app/PopulationScriptTests.py b/gamefolio_app/PopulationScriptTests.py
deleted file mode 100644
--- a/gamefolio_app/PopulationScriptTests.py	(revision 5510ebe65e441589bb2b41fb13c67816cc642cbd)
+++ /dev/null	(revision 5510ebe65e441589bb2b41fb13c67816cc642cbd)
@@ -1,125 +0,0 @@
-from django.test import TestCase
-from gamefolio_app.models import Game, Author, Review, List, ListEntry
-from django.contrib.auth.models import User
-from populate_gamefolio import *
-
-
-class PopulationScriptTests(TestCase):
-    """
-    Tests for the populate_gamefolio.py script.
-    """
-
-    def setUp(self):
-        """
-        Set up the environment for testing.
-        """
-        # Populate the database with sample data
-        populate_games()
-        populate_users()
-        populate_reviews()
-        populate_lists()
-
-        total_games = Game.objects.count()
-        avg_reviews_per_game = AVG_REVIEWS_PER_GAME
-        total_users = NUMBER_OF_USERS
-        user_with_list_percent = USER_WITH_LIST_PERCENT
-        avg_list_entry_per_list = 10
-
-        self.expected_review_count = total_games * avg_reviews_per_game
-        self.expected_list_count = total_users * user_with_list_percent
-        self.expected_list_entry_count = self.expected_list_count * avg_list_entry_per_list
-
-    def test_game_population(self):
-        """
-        Test if games are populated correctly.
-        """
-        # Check if the total number of games matches the expected value
-        self.assertEqual(Game.objects.count(), NUMBER_OF_GAMES)
-
-        # Get a sample game
-        sample_game = Game.objects.first()
-
-        # Check if the title is not empty
-        self.assertNotEqual(sample_game.title, "")
-
-        # Check if the genre is valid (if applicable)
-        if sample_game.genre:
-            self.assertTrue(sample_game.genre in ["Action", "Adventure", "RPG", "Strategy"])
-
-        # Check if the description is not empty
-        self.assertNotEqual(sample_game.description, "")
-
-        # Check if the picture ID is not empty
-        self.assertNotEqual(sample_game.pictureId, "")
-
-
-    def test_user_population(self):
-        """
-        Test if users are populated correctly.
-        """
-        # Check if the total number of users matches the expected value
-        self.assertEqual(User.objects.count(), NUMBER_OF_USERS)
-
-        # Get a sample user
-        sample_user = User.objects.first()
-
-        # Check if the username is not empty
-        self.assertNotEqual(sample_user.username, "")
-
-        # Check if the email is valid
-        self.assertTrue('@' in sample_user.email)
-
-        # Check if the author profile is created for the user
-        self.assertTrue(hasattr(sample_user, 'author'))
-
-    def test_review_population(self):
-        """
-        Test if reviews are populated correctly.
-        """
-        # Check if the total number of reviews matches the expected value
-        self.assertEqual(Review.objects.count(), self.expected_review_count)
-
-        # Get a sample review
-        sample_review = Review.objects.first()
-
-        # Check if the content is not empty
-        self.assertNotEqual(sample_review.content, "")
-
-        # Check if the rating is within the valid range
-        self.assertTrue(1 <= sample_review.rating <= 10)
-
-        # Check if the likes are non-negative
-        self.assertTrue(sample_review.likes >= 0)
-
-    def test_list_population(self):
-        """
-        Test if lists and list entries are populated correctly.
-        """
-        # Check if the total number of lists matches the expected value
-        self.assertEqual(List.objects.count(), self.expected_list_count)
-
-        # Check if the total number of list entries matches the expected value
-        self.assertEqual(ListEntry.objects.count(), self.expected_list_entry_count)
-
-        # Get a sample list and list entry
-        sample_list = List.objects.first()
-        sample_list_entry = ListEntry.objects.first()
-
-        # Check if the list title is not empty
-        self.assertNotEqual(sample_list.title, "")
-
-        # Check if the list description is not empty
-        self.assertNotEqual(sample_list.description, "")
-
-        # Check if the list entry is associated with a valid list and game
-        self.assertTrue(hasattr(sample_list_entry, 'list'))
-        self.assertTrue(hasattr(sample_list_entry, 'game'))
-
-
-    def tearDown(self):
-        """
-        Clean up after testing.
-        """
-        # Clear the database
-        clear_database()
-
Index: gamefolio_app/FormsTests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gamefolio_app/FormsTests.py b/gamefolio_app/FormsTests.py
deleted file mode 100644
--- a/gamefolio_app/FormsTests.py	(revision 5510ebe65e441589bb2b41fb13c67816cc642cbd)
+++ /dev/null	(revision 5510ebe65e441589bb2b41fb13c67816cc642cbd)
@@ -1,45 +0,0 @@
-from django.test import TestCase
-from django.contrib.auth.models import User
-from gamefolio_app.models import Author
-from gamefolio_app.forms import UserForm, AuthorForm
-
-class UserFormTest(TestCase):
-    def test_valid_form(self):
-        form_data = {
-            'username': 'testuser',
-            'email': 'test@example.com',
-            'password': 'testpassword'
-        }
-        form = UserForm(data=form_data)
-        self.assertTrue(form.is_valid())
-
-    def test_blank_data(self):
-        form = UserForm(data={})
-        self.assertFalse(form.is_valid())
-        self.assertEqual(form.errors['username'], ['This field is required.'])
-        self.assertEqual(form.errors['email'], ['This field is required.'])
-        self.assertEqual(form.errors['password'], ['This field is required.'])
-
-class AuthorFormTest(TestCase):
-    def setUp(self):
-        self.user = User.objects.create_user(username='testuser', email='test@example.com', password='testpassword')
-
-    def test_valid_form(self):
-        form_data = {
-            'website': 'http://example.com',
-        }
-        form = AuthorForm(data=form_data)
-        self.assertTrue(form.is_valid())
-
-    def test_blank_data(self):
-        form = AuthorForm(data={})
-        self.assertFalse(form.is_valid())
-        self.assertEqual(form.errors['website'], ['This field is required.'])
-
-    def test_valid_instance(self):
-        author = Author.objects.create(user=self.user, website='http://example.com')
-        form = AuthorForm(instance=author)
-        self.assertTrue(form.is_valid())
-
-
-
Index: gamefolio_app/ModelTests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gamefolio_app/ModelTests.py b/gamefolio_app/ModelTests.py
deleted file mode 100644
--- a/gamefolio_app/ModelTests.py	(revision 5510ebe65e441589bb2b41fb13c67816cc642cbd)
+++ /dev/null	(revision 5510ebe65e441589bb2b41fb13c67816cc642cbd)
@@ -1,149 +0,0 @@
-from django.test import TestCase
-from django.contrib.auth.models import User
-from gamefolio_app.models import Game, Review, Author, List, ListEntry
-
-
-class ModelTests(TestCase):
-
-    def setUp(self):
-        # Generate generic test objects
-        self.user = User.objects.create(username='testuser', email='test@example.com')
-        self.author = Author.objects.create(user=self.user, website='https://www.google.com', picture='profile.jpg')
-        self.author.save()
-
-        self.game = Game.objects.create(id='test-game', title='Test Game', genre='Adventure', pictureId='abc123',
-                                        description='This is a test game.')
-        self.game.save()
-
-        self.review = Review.objects.create(author=self.author, game=self.game, content='Great game!', rating=5)
-        self.review.save()
-
-        self.list = List.objects.create(author=self.author, title='Test List', description='This is a test list.')
-        self.list.save()
-
-        self.list_entry = ListEntry.objects.create(list=self.list, game=self.game)
-        self.list_entry.save()
-
-
-
-    def test_author_creation(self):
-        """
-        Test whether the Author model is created correctly.
-        """
-        self.assertEqual(self.author.user, self.user)
-        self.assertEqual(self.author.website, 'https://www.google.com')
-        self.assertEqual(self.author.picture, 'profile.jpg')
-
-    def test_game_creation(self):
-        """
-        Test whether the Game model creates a game correctly.
-        """
-        game = Game.objects.get(id='test-game')
-        self.assertEqual(game.title, 'Test Game')
-        self.assertEqual(game.genre, 'Adventure')
-        self.assertEqual(game.pictureId, 'abc123')
-        self.assertEqual(game.description, 'This is a test game.')
-        self.assertEqual(game.views, 0)
-
-    def test_average_rating(self):
-        """
-        Test whether the average_rating method returns the correct average rating.
-        """
-        # Create reviews with different ratings for the game
-        Review.objects.create(game=self.game, rating=4)
-        Review.objects.create(game=self.game, rating=2)
-        Review.objects.create(game=self.game, rating=5)
-
-        # Calculate the expected average rating
-        expected_average_rating = (4 + 2 + 5) / 3
-
-        # Check if the calculated average rating matches the expected value
-        self.assertAlmostEqual(self.game.average_rating(), expected_average_rating)
-
-    def test_average_text_rating(self):
-        """
-        Test whether the average_text_rating method returns the correct text representation of the average rating.
-        """
-        # Create reviews with different ratings for the game
-        Review.objects.create(game=self.game, rating=4)
-        Review.objects.create(game=self.game, rating=2)
-        Review.objects.create(game=self.game, rating=5)
-
-        # Calculate the expected average rating
-        expected_average_rating = (4 + 2 + 5) / 3
-
-        # Check if the calculated average text rating matches the expected value
-        self.assertEqual(self.game.average_text_rating(), f"{expected_average_rating:.1f} stars")
-
-    def test_total_reviews(self):
-        """
-        Test whether the total_reviews method returns the correct number of reviews for the game.
-        """
-        # Create three reviews for the game
-        Review.objects.create(game=self.game, rating=4)
-        Review.objects.create(game=self.game, rating=2)
-        Review.objects.create(game=self.game, rating=5)
-
-        # Check if the total number of reviews matches the expected value
-        self.assertEqual(self.game.total_reviews(), 3)
-
-    def test_get_image(self):
-        """
-        Test the get_image method of the Game model.
-        """
-        # Test image URL retrieval
-        self.assertEqual(self.game.get_image(), 'profile.jpg', )
-
-    def test_review_creation(self):
-        """
-        Test whether the Review model creates a review correctly.
-        """
-        self.assertEqual(self.review.game, self.game)
-        self.assertEqual(self.review.author, self.author)
-        self.assertEqual(self.review.content, 'Great game!')
-        self.assertEqual(self.review.rating, 8)
-        self.assertEqual(self.review.views, 0)
-        self.assertEqual(self.review.likes, 0)
-
-    def test_list_creation(self):
-        """
-        Test whether the List model creates a list correctly.
-        """
-        self.assertEqual(self.list.author, self.author)
-        self.assertEqual(self.list.title, 'Test List')
-        self.assertEqual(self.list.description, 'This is a test list.')
-        self.assertEqual(self.list.slug, 'test-list')  # Slug should be the same as title
-
-    def test_list_entry_creation(self):
-        """
-        Test whether the ListEntry model creates a list entry correctly.
-        """
-
-        # Check if the ListEntry object is created correctly
-        self.assertEqual(self.list_entry.list, self.list)
-        self.assertEqual(self.list_entry.game, self.game)
-
-    def test_str_method(self):
-
-        #Test whether the __str__ method returns the expected string representation.
-
-        expected_str = f"{self.user.username}'s Profile"
-        self.assertEqual(str(self.author), expected_str)
-
-        expected_str = 'Test Game'
-        self.assertEqual(str(self.game), expected_str)
-
-        expected_str = f"{self.user.username}'s Profile - Test List"
-        self.assertEqual(str(self.list), expected_str)
-
-        expected_str = f"{self.user.username} - Test Game: ★★★★★"
-        self.assertEqual(str(self.review), expected_str)
-
-    def tearDown(self):
-        # delete everything once done
-        self.game.delete()
-        self.user.delete()
-        self.author.delete()
-        self.review.delete()
-        self.list.delete()
-        self.list_entry.delete()
Index: gamefolio_app/ViewTests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gamefolio_app/ViewTests.py b/gamefolio_app/ViewTests.py
deleted file mode 100644
--- a/gamefolio_app/ViewTests.py	(revision 5510ebe65e441589bb2b41fb13c67816cc642cbd)
+++ /dev/null	(revision 5510ebe65e441589bb2b41fb13c67816cc642cbd)
@@ -1,285 +0,0 @@
-import os
-from django.core.files.uploadedfile import SimpleUploadedFile
-from django.test import TestCase, Client
-from django.urls import reverse
-from django.contrib.auth.models import User
-from django.utils.text import slugify
-
-#from gamefolio_app.forms import CreateListForm
-from gamefolio_app.models import Game, Review, Author, List, ListEntry
-from gamefolio_app.views import MyRegistrationView
-from populate_gamefolio import populate, clear_database
-
-
-FAILURE_HEADER = f"{os.linesep}{os.linesep}{os.linesep}================{os.linesep}TwD TEST FAILURE =({os.linesep}================{os.linesep}"
-FAILURE_FOOTER = f"{os.linesep}"
-
-class IndexViewTests(TestCase):
-    def setUp(self):
-        populate()
-        self.response = self.client.get(reverse('gamefolio_app:index'))
-        self.content = self.response.content.decode()
-
-    def test_template_filename(self):
-        self.assertTemplateUsed(self.response, 'gamefolio_app/index.html', f"{FAILURE_HEADER}Are you using index.html for your index() view? Why not?!{FAILURE_FOOTER}")
-
-    def test_index_view(self):
-        # Test index view
-        response = self.client.get(reverse('gamefolio_app:index'))
-        self.assertEqual(response.status_code, 200)
-        self.assertTemplateUsed(response, 'gamefolio_app/index.html')
-
-        # Check if game list and reviews list are in the context
-        self.assertIn('games', response.context)
-        self.assertIn('reviews', response.context)
-
-        # Check if the context lists are not empty
-        self.assertTrue(len(response.context['games']) > 0)
-        self.assertTrue(len(response.context['reviews']) > 0)
-
-        # Check if game list and reviews list are instances of QuerySet
-        self.assertIsInstance(response.context['games'], Game.objects.all().__class__)
-        self.assertIsInstance(response.context['reviews'], Review.objects.all().__class__)
-
-
-    def tearDown(self):
-        clear_database()
-
-class MyRegistrationViewTests(TestCase):
-    def setUp(self):
-        self.registration_view = MyRegistrationView()
-
-    def test_get_success_url(self):
-        # Test if the get_success_url method returns the correct success URL
-        success_url = self.registration_view.get_success_url()
-        expected_url = reverse('gamefolio_app:register_profile')
-        self.assertEqual(success_url, expected_url, "The success URL returned by get_success_url method is incorrect.")
-
-class RegisterProfileViewTests(TestCase):
-    def setUp(self):
-        self.client = Client()
-        self.user = User.objects.create_user(username='testuser', email='test@example.com', password='testpassword')
-
-    def test_get(self):
-        self.client.force_login(self.user)
-        response = self.client.get(reverse('gamefolio_app:register_profile'))
-        self.assertEqual(response.status_code, 200)
-        self.assertTemplateUsed(response, 'gamefolio_app/profile_registration.html')
-
-    def test_post_valid_form(self):
-        self.client.force_login(self.user)
-        data = {
-            'field1': 'value1',
-            'field2': 'value2',
-            # Add other fields as needed
-        }
-        response = self.client.post(reverse('gamefolio_app:register_profile'), data)
-        self.assertEqual(response.status_code, 302)  # Check if redirected after successful form submission
-        self.assertEqual(response.url, reverse('gamefolio_app:index'))  # Check if redirected to the correct URL
-
-    def test_post_invalid_form(self):
-        self.client.force_login(self.user)
-        data = {}  # Invalid data, form should fail validation
-        response = self.client.post(reverse('gamefolio_app:register_profile'), data)
-        self.assertEqual(response.status_code, 200)  # Form submission should return to the same page
-        self.assertTemplateUsed(response, 'gamefolio_app/profile_registration.html')  # Check if correct template is used
-        # Add more assertions if needed to test form errors or other behavior
-
-
-class UserLoginViewTests(TestCase):
-    def setUp(self):
-        self.client = Client()
-        self.user = User.objects.create_user(username='testuser', email='test@example.com', password='testpassword')
-
-    def test_get(self):
-        response = self.client.get(reverse('gamefolio_app:user_login'))
-        self.assertEqual(response.status_code, 200)
-        self.assertTemplateUsed(response, 'gamefolio_app/registration/login.html')
-
-    def test_post_valid_credentials(self):
-        data = {
-            'username': 'testuser',
-            'password': 'testpassword',
-        }
-        response = self.client.post(reverse('gamefolio_app:user_login'), data)
-        self.assertEqual(response.status_code, 302)  # Check if redirected after successful login
-        self.assertEqual(response.url, reverse('gamefolio_app:profile'))  # Check if redirected to the correct URL
-
-    def test_post_invalid_credentials(self):
-        data = {
-            'username': 'invaliduser',
-            'password': 'invalidpassword',
-        }
-        response = self.client.post(reverse('gamefolio_app:user_login'), data)
-        self.assertEqual(response.status_code, 200)  # Login attempt should return to the same page
-        self.assertTemplateUsed(response, 'gamefolio_app/registration/login.html')  # Check if correct template is used
-
-class UserLogoutViewTests(TestCase):
-    def setUp(self):
-        self.user = User.objects.create_user(username='testuser', email='test@example.com', password='testpassword')
-        self.client.login(username='testuser', password='testpassword')
-
-    def test_logout(self):
-        response = self.client.get(reverse('gamefolio_app:user_logout'))
-        self.assertEqual(response.status_code, 302)  # Check if redirected after logout
-        self.assertEqual(response.url, reverse('gamefolio_app:index'))  # Check if redirected to the correct URL
-        self.assertFalse('_auth_user_id' in self.client.session)  # Check if user is logged out
-
-    def test_logout_redirect(self):
-        response = self.client.get(reverse('gamefolio_app:user_logout') + '?next=/some/other/url/')
-        self.assertEqual(response.status_code, 302)  # Check if redirected after logout
-        self.assertEqual(response.url, '/some/other/url/')  # Check if redirected to the correct URL
-        self.assertFalse('_auth_user_id' in self.client.session)  # Check if user is logged out
-
-class ProfileViewTests(TestCase):
-    def setUp(self):
-        self.user = User.objects.create_user(username='testuser', email='test@example.com', password='testpassword')
-        self.client.login(username='testuser', password='testpassword')
-        self.author = Author.objects.create(user=self.user, website='http://example.com')
-        self.review = Review.objects.create(author=self.author, content='Test review')
-        self.profile_url = reverse('gamefolio_app:profile', kwargs={'username': self.user.username})
-
-    def test_get_profile_view(self):
-        response = self.client.get(self.profile_url)
-        self.assertEqual(response.status_code, 200)
-        self.assertTemplateUsed(response, 'gamefolio_app/profile.html')
-
-    def test_post_profile_view(self):
-        # Prepare POST data
-        post_data = {
-            'website': 'http://updated-example.com',
-            'picture': SimpleUploadedFile('test_image.jpg', b'content', content_type='image/jpeg')
-        }
-        response = self.client.post(self.profile_url, post_data)
-        self.assertEqual(response.status_code, 302)  # Check if redirected after form submission
-        updated_author = Author.objects.get(user=self.user)
-        self.assertEqual(updated_author.website, 'http://updated-example.com')  # Check if website is updated
-        self.assertTrue(updated_author.picture)  # Check if picture is uploaded
-
-    def test_unauthorised_access(self):
-        another_user = User.objects.create_user(username='anotheruser', email='another@example.com', password='anotherpassword')
-        response = self.client.get(reverse('gamefolio_app:profile', kwargs={'username': another_user.username}))
-        self.assertEqual(response.status_code, 403)  # Check if access is forbidden for other users
-
-class ListProfilesViewTests(TestCase):
-    def setUp(self):
-        self.client = Client()
-        self.user = User.objects.create_user(username='testuser', email='test@example.com', password='testpassword')
-        self.client.login(username='testuser', password='testpassword')
-        self.author1 = Author.objects.create(user=self.user)
-        self.author2 = Author.objects.create(user=User.objects.create_user(username='testuser2', email='test2@example.com', password='testpassword'))
-        self.review1 = Review.objects.create(author=self.author1, content='Test review 1', likes=10)
-        self.review2 = Review.objects.create(author=self.author1, content='Test review 2', likes=5)
-        self.review3 = Review.objects.create(author=self.author2, content='Test review 3', likes=15)
-
-    def test_list_profiles_view_sort_by_reviews(self):
-        response = self.client.get(reverse('gamefolio_app:list_profiles'))
-        self.assertEqual(response.status_code, 200)
-        self.assertTemplateUsed(response, 'gamefolio_app/list_profiles.html')
-        authors = response.context['authors']
-        self.assertEqual(len(authors), 2)
-        self.assertEqual(authors[0].total_reviews, 2)
-        self.assertEqual(authors[1].total_reviews, 1)
-
-    def test_list_profiles_view_sort_by_likes(self):
-        response = self.client.get(reverse('gamefolio_app:list_profiles'), {'sort_by': 'likes'})
-        self.assertEqual(response.status_code, 200)
-        self.assertTemplateUsed(response, 'gamefolio_app/list_profiles.html')
-        authors = response.context['authors']
-        self.assertEqual(len(authors), 2)
-        self.assertEqual(authors[0].total_likes, 15)
-        self.assertEqual(authors[1].total_likes, 15)
-
-class ListViewTests(TestCase):
-    def setUp(self):
-        self.user = User.objects.create_user(username='testuser', email='test@example.com', password='testpassword')
-        self.client.login(username='testuser', password='testpassword')
-        self.list_author = User.objects.create_user(username='list_author', email='author@example.com', password='authorpassword')
-        self.list = List.objects.create(title='Test List', author=self.list_author.profile)
-        self.game = Game.objects.create(title='Test Game')
-        self.list_entry = ListEntry.objects.create(list=self.list, game=self.game)
-        self.list_url = reverse('gamefolio_app:list', kwargs={'author_username': self.list_author.username, 'list_title': slugify(self.list.title), 'slug': self.list.slug})
-
-    def test_get_list_view(self):
-        response = self.client.get(self.list_url)
-        self.assertEqual(response.status_code, 200)
-        self.assertTemplateUsed(response, 'gamefolio_app/list.html')
-        self.assertIn(self.list, response.context['list_obj'])
-        self.assertIn(self.list_entry, response.context['list_entries'])
-        self.assertIn(self.game, response.context['all_games'])
-
-    def test_post_list_view(self):
-        post_data = {'game': self.game.id}
-        response = self.client.post(self.list_url, post_data)
-        self.assertEqual(response.status_code, 302)  # Check if redirected after adding game
-        updated_list_entries = ListEntry.objects.filter(list=self.list)
-        self.assertTrue(updated_list_entries.exists())  # Check if list entry is created
-        self.assertEqual(updated_list_entries.count(), 2)  # Check if the number of list entries increased
-
-class ListsViewTests(TestCase):
-    def setUp(self):
-        self.user = User.objects.create_user(username='testuser', email='test@example.com', password='testpassword')
-        self.client.login(username='testuser', password='testpassword')
-
-    def test_get_lists_view(self):
-        response = self.client.get(reverse('gamefolio_app:lists'))
-        self.assertEqual(response.status_code, 200)
-        self.assertTemplateUsed(response, 'gamefolio_app/lists.html')
-        #self.assertIsInstance(response.context['create_list_form'], CreateListForm)
-        self.assertQuerysetEqual(response.context['all_lists'], [])
-        self.assertQuerysetEqual(response.context['user_list'], [])
-
-    def test_post_lists_view(self):
-        post_data = {
-            'title': 'Test List',
-            'description': 'Test description',
-            'games': [],
-        }
-        response = self.client.post(reverse('gamefolio_app:lists'), post_data)
-        self.assertEqual(response.status_code, 302)  # Check if redirected after form submission
-        new_list = List.objects.first()
-        self.assertIsNotNone(new_list)  # Check if the new list is created
-        self.assertEqual(new_list.author, self.user.profile)  # Check if the author is set correctly
-        self.assertEqual(new_list.title, 'Test List')  # Check if the title is set correctly
-        self.assertEqual(new_list.description, 'Test description')  # Check if the description is set correctly
-        self.assertQuerysetEqual(new_list.games.all(), [])  # Check if no games are added to the list initially
-
-class NotFoundViewTests(TestCase):
-    def test_get_not_found_view(self):
-        response = self.client.get(reverse('gamefolio_app:not_found'))
-        self.assertEqual(response.status_code, 200)  # Ensure the status code is correct
-        self.assertTemplateUsed(response, 'gamefolio_app/404.html')  # Ensure the correct template is used
-
-class SearchViewTests(TestCase):
-    def setUp(self):
-        self.client = Client()
-        self.user = User.objects.create_user(username='testuser', email='test@example.com', password='testpassword')
-
-    def test_search_view_no_params(self):
-        response = self.client.get(reverse('gamefolio_app:search'))
-        self.assertEqual(response.status_code, 200)  # Ensure the status code is correct
-        self.assertTemplateUsed(response, 'gamefolio_app/search.html')  # Ensure the correct template is used
-
-    def test_search_view_with_query(self):
-        response = self.client.get(reverse('gamefolio_app:search'), {'query': 'test'})
-        self.assertEqual(response.status_code, 200)  # Ensure the status code is correct
-        self.assertTemplateUsed(response, 'gamefolio_app/search.html')  # Ensure the correct template is used
-
-    def test_search_view_with_params(self):
-        response = self.client.get(reverse('gamefolio_app:search'), {'query': 'test', 'page': 1, 'genre': 'Action', 'sort': 'rd'})
-        self.assertEqual(response.status_code, 200)  # Ensure the status code is correct
-        self.assertTemplateUsed(response, 'gamefolio_app/search.html')  # Ensure the correct template is used
-
-    def test_search_view_different_sorting(self):
-        # Test with different sorting options
-        sorting_options = ['rd', 'ra', 'vd', 'va', 'ta', 'td']
-        for sort_option in sorting_options:
-            response = self.client.get(reverse('gamefolio_app:search'), {'query': 'test', 'sort': sort_option})
-            self.assertEqual(response.status_code, 200)  # Ensure the status code is correct
-            self.assertTemplateUsed(response, 'gamefolio_app/search.html')  # Ensure the correct template is used
-
-    def test_search_view_different_page(self):
-        response = self.client.get(reverse('gamefolio_app:search'), {'query': 'test', 'page': 2})
-        self.assertEqual(response.status_code, 200)  # Ensure the status code is correct
-        self.assertTemplateUsed(response, 'gamefolio_app/search.html')  # Ensure the correct template is used
-
